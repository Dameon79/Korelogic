[{"/Users/dameon/korelogic/src/components/FilterMenu.js":"1","/Users/dameon/korelogic/src/App.js":"2","/Users/dameon/korelogic/src/components/Rating.js":"3","/Users/dameon/korelogic/src/components/VeganOptions.js":"4","/Users/dameon/korelogic/src/components/DogFriendly.js":"5","/Users/dameon/korelogic/src/components/Cuisines.js":"6"},{"size":3460,"mtime":1611396630634,"results":"7","hashOfConfig":"8"},{"size":3341,"mtime":1611398588108,"results":"9","hashOfConfig":"8"},{"size":336,"mtime":1611394656874,"results":"10","hashOfConfig":"8"},{"size":717,"mtime":1611394660610,"results":"11","hashOfConfig":"8"},{"size":702,"mtime":1611395792118,"results":"12","hashOfConfig":"8"},{"size":608,"mtime":1611394673088,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nkjir8",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dameon/korelogic/src/components/FilterMenu.js",[],"/Users/dameon/korelogic/src/App.js",["27"],"import { useState } from \"react\";\nimport { data } from \"./data.js\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nimport Cuisines from \"./components/Cuisines\";\nimport Rating from \"./components/Rating\";\nimport VeganOptions from \"./components/VeganOptions\";\nimport DogFriendly from \"./components/DogFriendly\";\nimport FilterMenu from \"./components/FilterMenu\";\n\nconst getStyles = makeStyles({\n  root: {\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"lightGrey\",\n    paddingTop: \"1rem\",\n    display: \"flex\",\n    boxSizing: \"border-box\",\n    flexWrap: \"wrap\",\n    alignContent: \"start\",\n    justifyContent: \"center\",\n    overflow: \"auto\",\n  },\n  restaurantCard: {\n    width: \"20vw\",\n    margin: \"0.5rem\",\n    padding: \"0.5rem\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n});\n\nfunction App() {\n  const classes = getStyles();\n\n  const [restaurantFilters, setRestaurantFilters] = useState([]);\n  const [switchState, setSwitchState] = useState({\n    \"dog-friendly\": false,\n    \"vegan-options\": false,\n  });\n  const restaurantFilterArray = [];\n\n  // Get all of the cuisines available and push to holding Array\n  data.forEach((restaurant) => {\n    restaurant.cuisine.map((cuisine) => restaurantFilterArray.push(cuisine));\n  });\n\n  // Filter to only have unique values\n  const uniqueFilters = [...new Set(restaurantFilterArray)];\n\n  const checkDogFriendlyToggleValues = (restaurant) => {\n    let returnValue = true;\n    if (switchState[\"dog-friendly\"]) {\n      if (restaurant[\"dog-friendly\"]) {\n        returnValue = true;\n      } else returnValue = false;\n    }\n    return returnValue;\n  };\n\n  const checkToggleValues = (restaurant, toggleSwitch) => {\n    let returnValue = true;\n    if (switchState[toggleSwitch]) {\n      if (restaurant[toggleSwitch]) {\n        returnValue = true;\n      } else returnValue = false;\n    }\n    return returnValue;\n  };\n\n  return (\n    <div className={classes.root}>\n      <FilterMenu\n        filterList={uniqueFilters}\n        setRestaurantFilters={setRestaurantFilters}\n        restaurantFilters={restaurantFilters}\n        switchState={switchState}\n        setSwitchState={setSwitchState}\n      />\n      {data.map((restaurant) => {\n        return (\n          // Only render the Resaurant Cards where their cuisines include all of the selected filter values\n          restaurantFilters.every((filterValue) =>\n            restaurant.cuisine.includes(filterValue)\n          ) &&\n          // Check if toggles have been activated\n          checkToggleValues(restaurant, \"dog-friendly\") &&\n          checkToggleValues(restaurant, \"vegan-options\") && (\n            <Card className={classes.restaurantCard} key={restaurant.name}>\n              <Typography variant=\"h5\">{restaurant.name}</Typography>\n              <CardContent>\n                Address: {restaurant.address}\n                <Cuisines cuisineList={restaurant.cuisine} />\n                <VeganOptions hasVeganOptions={restaurant[\"vegan-options\"]} />\n                <DogFriendly dogFriendly={restaurant[\"dog-friendly\"]} />\n                <Rating rating={restaurant.rating} />\n              </CardContent>\n            </Card>\n          )\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/dameon/korelogic/src/components/Rating.js",[],"/Users/dameon/korelogic/src/components/VeganOptions.js",[],"/Users/dameon/korelogic/src/components/DogFriendly.js",[],"/Users/dameon/korelogic/src/components/Cuisines.js",[],{"ruleId":"28","severity":1,"message":"29","line":54,"column":9,"nodeType":"30","messageId":"31","endLine":54,"endColumn":37},"no-unused-vars","'checkDogFriendlyToggleValues' is assigned a value but never used.","Identifier","unusedVar"]